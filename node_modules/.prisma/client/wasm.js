
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  email: 'email',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  codename: 'codename',
  customerName: 'customerName',
  aboutNote: 'aboutNote',
  threadId: 'threadId',
  status: 'status',
  lastCustomerAt: 'lastCustomerAt',
  lastAgentAt: 'lastAgentAt',
  locale: 'locale',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  conversationId: 'conversationId',
  direction: 'direction',
  text: 'text',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  conversationId: 'conversationId',
  actor: 'actor',
  action: 'action',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.MessageTemplateLocaleScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  key: 'key',
  locale: 'locale',
  enabled: 'enabled',
  text: 'text',
  toCustomerWs: 'toCustomerWs',
  toCustomerPersist: 'toCustomerPersist',
  toTelegram: 'toTelegram',
  pinInTopic: 'pinInTopic',
  rateLimitPerConvSec: 'rateLimitPerConvSec',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChannelScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  type: 'type',
  encConfig: 'encConfig',
  webhookSecret: 'webhookSecret',
  headerSecret: 'headerSecret',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  hashedKey: 'hashedKey',
  scopes: 'scopes',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.OutboxScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  type: 'type',
  payload: 'payload',
  idempotencyKey: 'idempotencyKey',
  status: 'status',
  attempts: 'attempts',
  nextAttemptAt: 'nextAttemptAt',
  lastError: 'lastError',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanPriceScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  currency: 'currency',
  unitAmountCents: 'unitAmountCents',
  interval: 'interval',
  stripePriceId: 'stripePriceId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanFeatureScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ConversationStatus = exports.$Enums.ConversationStatus = {
  OPEN_UNCLAIMED: 'OPEN_UNCLAIMED',
  OPEN_ASSIGNED: 'OPEN_ASSIGNED',
  AWAITING_CUSTOMER: 'AWAITING_CUSTOMER',
  CLOSED: 'CLOSED',
  BLOCKED: 'BLOCKED'
};

exports.MessageDirection = exports.$Enums.MessageDirection = {
  INBOUND: 'INBOUND',
  OUTBOUND: 'OUTBOUND'
};

exports.OutboxStatus = exports.$Enums.OutboxStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  DONE: 'DONE',
  FAILED: 'FAILED'
};

exports.BillingInterval = exports.$Enums.BillingInterval = {
  month: 'month',
  year: 'year'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  Member: 'Member',
  Conversation: 'Conversation',
  Message: 'Message',
  AuditLog: 'AuditLog',
  MessageTemplateLocale: 'MessageTemplateLocale',
  Channel: 'Channel',
  ApiKey: 'ApiKey',
  Outbox: 'Outbox',
  Setting: 'Setting',
  Plan: 'Plan',
  PlanPrice: 'PlanPrice',
  PlanFeature: 'PlanFeature'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/ubuntu/v2-support-chat/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/ubuntu/v2-support-chat/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Tenant {\n  id        String   @id @default(cuid())\n  name      String\n  slug      String   @unique\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  members       Member[]\n  conversations Conversation[]\n  channels      Channel[]\n  apiKeys       ApiKey[]\n  outboxes      Outbox[]\n  settings      Setting[]\n}\n\nmodel Member {\n  id        String   @id @default(cuid())\n  tenantId  String\n  email     String\n  role      String\n  isActive  Boolean  @default(true)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)\n}\n\nmodel Conversation {\n  id             String             @id @default(cuid())\n  tenantId       String\n  codename       String\n  customerName   String?\n  aboutNote      String?            @db.Text\n  threadId       Int?\n  status         ConversationStatus @default(OPEN_UNCLAIMED)\n  lastCustomerAt DateTime           @default(now())\n  lastAgentAt    DateTime           @default(now())\n  locale         String             @default(\"default\")\n  createdAt      DateTime           @default(now())\n  updatedAt      DateTime           @updatedAt\n\n  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)\n  messages  Message[]\n  auditLogs AuditLog[]\n\n  @@index([tenantId, updatedAt])\n  @@index([tenantId, status])\n  @@index([tenantId, threadId])\n}\n\nenum ConversationStatus {\n  OPEN_UNCLAIMED\n  OPEN_ASSIGNED\n  AWAITING_CUSTOMER\n  CLOSED\n  BLOCKED\n}\n\nmodel Message {\n  id             String           @id @default(cuid())\n  tenantId       String\n  conversationId String\n  direction      MessageDirection\n  text           String           @db.Text\n  createdAt      DateTime         @default(now())\n\n  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n\n  @@index([tenantId, createdAt])\n}\n\nenum MessageDirection {\n  INBOUND\n  OUTBOUND\n}\n\nmodel AuditLog {\n  id             String   @id @default(cuid())\n  tenantId       String\n  conversationId String\n  actor          String\n  action         String\n  meta           Json\n  createdAt      DateTime @default(now())\n\n  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n\n  @@index([tenantId, createdAt])\n}\n\nmodel MessageTemplateLocale {\n  id                  String   @id @default(cuid())\n  tenantId            String\n  key                 String\n  locale              String   @default(\"default\")\n  enabled             Boolean  @default(true)\n  text                String   @db.Text\n  toCustomerWs        Boolean  @default(false)\n  toCustomerPersist   Boolean  @default(false)\n  toTelegram          Boolean  @default(false)\n  pinInTopic          Boolean  @default(false)\n  rateLimitPerConvSec Int?\n  createdAt           DateTime @default(now())\n  updatedAt           DateTime @updatedAt\n\n  @@unique([tenantId, key, locale])\n  @@index([tenantId, locale, key])\n}\n\nmodel Channel {\n  id            String   @id @default(cuid())\n  tenantId      String\n  type          String // e.g., 'telegram'\n  encConfig     String // encrypted JSON (AES-GCM)\n  webhookSecret String   @unique\n  headerSecret  String?\n  status        String   @default(\"active\")\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)\n\n  @@index([tenantId, type])\n}\n\nmodel ApiKey {\n  id         String    @id @default(cuid())\n  tenantId   String\n  name       String\n  hashedKey  String\n  scopes     String\n  createdAt  DateTime  @default(now())\n  lastUsedAt DateTime?\n\n  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)\n\n  @@index([tenantId])\n}\n\nmodel Outbox {\n  id             String       @id @default(cuid())\n  tenantId       String\n  type           String // e.g., 'telegram_send'\n  payload        Json\n  idempotencyKey String?\n  status         OutboxStatus @default(PENDING)\n  attempts       Int          @default(0)\n  nextAttemptAt  DateTime     @default(now())\n  lastError      String?\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n\n  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)\n\n  @@unique([tenantId, idempotencyKey])\n  @@index([tenantId, status, nextAttemptAt])\n}\n\nenum OutboxStatus {\n  PENDING\n  PROCESSING\n  DONE\n  FAILED\n}\n\nmodel Setting {\n  id        String   @id @default(cuid())\n  tenantId  String\n  key       String\n  value     String   @db.Text\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)\n\n  @@unique([tenantId, key])\n  @@index([tenantId, key])\n}\n\n// --- Billing (Plans/Prices/Features) ---\n\nenum BillingInterval {\n  month\n  year\n}\n\nmodel Plan {\n  id          String   @id @default(cuid())\n  key         String   @unique\n  name        String\n  description String?\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  prices   PlanPrice[]\n  features PlanFeature[]\n}\n\nmodel PlanPrice {\n  id              String          @id @default(cuid())\n  planId          String\n  currency        String          @default(\"eur\")\n  unitAmountCents Int\n  interval        BillingInterval\n  stripePriceId   String?\n  isActive        Boolean         @default(true)\n  createdAt       DateTime        @default(now())\n  updatedAt       DateTime        @updatedAt\n\n  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)\n\n  @@index([planId, currency, interval, isActive])\n}\n\nmodel PlanFeature {\n  id        String   @id @default(cuid())\n  planId    String\n  key       String\n  value     String   @db.Text\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)\n\n  @@unique([planId, key])\n}\n",
  "inlineSchemaHash": "79093f56a54612df5a95ac4b756a471827d76db706b9720e08b83a185bce82a7",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Tenant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"Member\",\"relationName\":\"MemberToTenant\"},{\"name\":\"conversations\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToTenant\"},{\"name\":\"channels\",\"kind\":\"object\",\"type\":\"Channel\",\"relationName\":\"ChannelToTenant\"},{\"name\":\"apiKeys\",\"kind\":\"object\",\"type\":\"ApiKey\",\"relationName\":\"ApiKeyToTenant\"},{\"name\":\"outboxes\",\"kind\":\"object\",\"type\":\"Outbox\",\"relationName\":\"OutboxToTenant\"},{\"name\":\"settings\",\"kind\":\"object\",\"type\":\"Setting\",\"relationName\":\"SettingToTenant\"}],\"dbName\":null},\"Member\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tenant\",\"kind\":\"object\",\"type\":\"Tenant\",\"relationName\":\"MemberToTenant\"}],\"dbName\":null},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"codename\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"aboutNote\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"threadId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ConversationStatus\"},{\"name\":\"lastCustomerAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastAgentAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"locale\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tenant\",\"kind\":\"object\",\"type\":\"Tenant\",\"relationName\":\"ConversationToTenant\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"auditLogs\",\"kind\":\"object\",\"type\":\"AuditLog\",\"relationName\":\"AuditLogToConversation\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"direction\",\"kind\":\"enum\",\"type\":\"MessageDirection\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToMessage\"}],\"dbName\":null},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"AuditLogToConversation\"}],\"dbName\":null},\"MessageTemplateLocale\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"locale\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"toCustomerWs\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"toCustomerPersist\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"toTelegram\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"pinInTopic\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rateLimitPerConvSec\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Channel\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"encConfig\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"webhookSecret\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"headerSecret\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tenant\",\"kind\":\"object\",\"type\":\"Tenant\",\"relationName\":\"ChannelToTenant\"}],\"dbName\":null},\"ApiKey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hashedKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scopes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastUsedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tenant\",\"kind\":\"object\",\"type\":\"Tenant\",\"relationName\":\"ApiKeyToTenant\"}],\"dbName\":null},\"Outbox\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"idempotencyKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"OutboxStatus\"},{\"name\":\"attempts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"nextAttemptAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastError\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tenant\",\"kind\":\"object\",\"type\":\"Tenant\",\"relationName\":\"OutboxToTenant\"}],\"dbName\":null},\"Setting\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tenantId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tenant\",\"kind\":\"object\",\"type\":\"Tenant\",\"relationName\":\"SettingToTenant\"}],\"dbName\":null},\"Plan\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"prices\",\"kind\":\"object\",\"type\":\"PlanPrice\",\"relationName\":\"PlanToPlanPrice\"},{\"name\":\"features\",\"kind\":\"object\",\"type\":\"PlanFeature\",\"relationName\":\"PlanToPlanFeature\"}],\"dbName\":null},\"PlanPrice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"planId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"unitAmountCents\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"interval\",\"kind\":\"enum\",\"type\":\"BillingInterval\"},{\"name\":\"stripePriceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"plan\",\"kind\":\"object\",\"type\":\"Plan\",\"relationName\":\"PlanToPlanPrice\"}],\"dbName\":null},\"PlanFeature\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"planId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"plan\",\"kind\":\"object\",\"type\":\"Plan\",\"relationName\":\"PlanToPlanFeature\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

